{
  "$schema": "../../specs/erc7730-v1.schema.json",
  "context": {
    "$id": "LiFi Diamond Contract",
    "contract": {
      "abi": "https://raw.githubusercontent.com/lifinance/lifi-contract-types/refs/heads/main/dist/diamond.json",
      "deployments": [
        {
          "chainId": 1,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 137,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 42161,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 10,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 56,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 43114,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 100,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 250,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 324,
          "address": "0x341e94069f53234fE6DabeF707aD424830525715"
        },
        {
          "chainId": 8453,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 59144,
          "address": "0xDE1E598b81620773454588B85D6b5D4eEC32573e"
        },
        {
          "chainId": 5000,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 534352,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 42220,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1284,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1285,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1313161554,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1088,
          "address": "0x24ca98fB6972F5eE05f0dB00595c7f68D9FaFd68"
        },
        {
          "chainId": 25,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1666600000,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 122,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 288,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 106,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 9001,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 42170,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 167004,
          "address": "0x3A9A5dBa8FE1C4Da98187cE4755701BCA182f63b"
        },
        {
          "chainId": 204,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 81457,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 252,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 34443,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        }
      ]
    }
  },
  "metadata": {
    "owner": "LiFi",
    "info": {
      "legalName": "LI.FI GmbH",
      "url": "https://li.fi/",
      "deploymentDate": "2022-01-01T00:00:00Z"
    },
    "constants": {
      "nativeAssetAddress": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
    }
  },
  "display": {
    "formats": {
      "startBridgeTokensViaAcross(tuple,tuple)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "acrossData.relayerFeePct",
            "label": "Relayer Fee",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaAcross(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].receivingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "acrossData.relayerFeePct",
            "label": "Relayer Fee",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "swapData.[0].receivingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaHop(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaHop(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].receivingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].receivingAssetId"
            }
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "swapData.[0].receivingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaMayan(tuple,tuple)": {
        "intent": "Bridge tokens via Mayan Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "mayanData.nonEVMReceiver",
            "label": "Non-EVM Receiver",
            "format": "raw"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaGasZip(tuple,tuple)": {
        "intent": "Bridge tokens via GasZip",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "gasZipData.receiverAddress",
            "label": "Receiver Address",
            "format": "raw"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "gasZipData.destinationChains",
            "label": "Destination Chains",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaGasZip(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via GasZip",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].receivingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "gasZipData.destinationChains",
            "label": "Destination Chains",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "swapData.[0].receivingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaMayan(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Mayan Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "mayanData.nonEVMReceiver",
            "label": "Non-EVM Receiver",
            "format": "raw"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].receivingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "swapData.[0].receivingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaAcrossERC20Min(bytes32,address,uint256,address,uint64,int64,uint32)": {
        "intent": "Bridge ERC20 tokens via Across Protocol (Minimal)",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Token",
            "format": "addressName"
          },
          {
            "path": "minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "relayerFeePct",
            "label": "Relayer Fee",
            "format": "raw"
          },
          {
            "path": "quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "sendingAssetId",
          "minAmount",
          "receiver",
          "destinationChainId"
        ]
      },
      "startBridgeTokensViaAcrossNativeMin(bytes32,address,uint64,int64,uint32)": {
        "intent": "Bridge native tokens via Across Protocol (Minimal)",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "relayerFeePct",
            "label": "Relayer Fee",
            "format": "raw"
          },
          {
            "path": "quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId"
        ]
      },
      "startBridgeTokensViaDeBridgeDln(tuple,tuple)": {
        "intent": "Bridge tokens via DeBridge DLN",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "deBridgeData.minAmountOut",
            "label": "Minimum Amount Out",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaDeBridgeDln(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via DeBridge DLN",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].receivingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "deBridgeData.minAmountOut",
            "label": "Minimum Amount Out",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "swapData.[0].receivingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "executeCallAndWithdraw(address,bytes,address,address,uint256)": {
        "intent": "Execute call and withdraw",
        "fields": [
          {
            "path": "callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "assetAddress",
            "label": "Asset Address",
            "format": "addressName"
          },
          {
            "path": "to",
            "label": "Recipient",
            "format": "addressName"
          },
          {
            "path": "amount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "assetAddress"
            }
          }
        ],
        "required": [
          "callTo",
          "assetAddress",
          "to",
          "amount"
        ]
      },
      "setApprovalForBridge(address[])": {
        "intent": "Set approval for bridge",
        "fields": [
          {
            "path": "tokensToApprove",
            "label": "Tokens To Approve",
            "format": "raw"
          }
        ],
        "required": [
          "tokensToApprove"
        ]
      },
      "addDex(address)": {
        "intent": "Add DEX",
        "fields": [
          {
            "path": "dex",
            "label": "DEX Address",
            "format": "addressName"
          }
        ],
        "required": [
          "dex"
        ]
      },
      "removeDex(address)": {
        "intent": "Remove DEX",
        "fields": [
          {
            "path": "dex",
            "label": "DEX Address",
            "format": "addressName"
          }
        ],
        "required": [
          "dex"
        ]
      },
      "batchAddDex(address[])": {
        "intent": "Batch add DEXs",
        "fields": [
          {
            "path": "dexs",
            "label": "DEX Addresses",
            "format": "raw"
          }
        ],
        "required": [
          "dexs"
        ]
      },
      "batchRemoveDex(address[])": {
        "intent": "Batch remove DEXs",
        "fields": [
          {
            "path": "dexs",
            "label": "DEX Addresses",
            "format": "raw"
          }
        ],
        "required": [
          "dexs"
        ]
      },
      "setFunctionApprovalBySignature(bytes4,bool)": {
        "intent": "Set function approval by signature",
        "fields": [
          {
            "path": "signature",
            "label": "Function Signature",
            "format": "raw"
          },
          {
            "path": "approval",
            "label": "Approval",
            "format": "raw"
          }
        ],
        "required": [
          "signature",
          "approval"
        ]
      },
      "batchSetFunctionApprovalBySignature(bytes4[],bool)": {
        "intent": "Batch set function approval by signature",
        "fields": [
          {
            "path": "signatures",
            "label": "Function Signatures",
            "format": "raw"
          },
          {
            "path": "approval",
            "label": "Approval",
            "format": "raw"
          }
        ],
        "required": [
          "signatures",
          "approval"
        ]
      },
      "setCanExecute(bytes4,address,bool)": {
        "intent": "Set execution permission",
        "fields": [
          {
            "path": "selector",
            "label": "Function Selector",
            "format": "raw"
          },
          {
            "path": "executor",
            "label": "Executor",
            "format": "addressName"
          },
          {
            "path": "canExecute",
            "label": "Can Execute",
            "format": "raw"
          }
        ],
        "required": [
          "selector",
          "executor",
          "canExecute"
        ]
      },
      "registerBridge(address,address)": {
        "intent": "Register bridge",
        "fields": [
          {
            "path": "assetId",
            "label": "Asset ID",
            "format": "addressName"
          },
          {
            "path": "bridge",
            "label": "Bridge Address",
            "format": "addressName"
          }
        ],
        "required": [
          "assetId",
          "bridge"
        ]
      },
      "initHop(tuple[])": {
        "intent": "Initialize Hop Protocol",
        "fields": [
          {
            "path": "configs",
            "label": "Configurations",
            "format": "raw"
          }
        ],
        "required": [
          "configs"
        ]
      },
      "cancelOwnershipTransfer()": {
        "intent": "Execute function",
        "fields": [],
        "required": []
      },
      "confirmOwnershipTransfer()": {
        "intent": "Execute function",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaAcrossERC20Min(bytes32,address,uint256,address,uint64,int64,uint32,bytes,uint256)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "relayerFeePct",
            "label": "Relayer Fee Pct",
            "format": "raw"
          },
          {
            "path": "quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "message",
            "label": "Message",
            "format": "raw"
          },
          {
            "path": "maxCount",
            "label": "Max Count",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "sendingAssetId",
          "minAmount",
          "receiver",
          "destinationChainId",
          "relayerFeePct",
          "quoteTimestamp",
          "message",
          "maxCount"
        ]
      },
      "startBridgeTokensViaAcrossERC20Packed()": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaAcrossNativeMin(bytes32,address,uint256,int64,uint32,bytes,uint256)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "relayerFeePct",
            "label": "Relayer Fee Pct",
            "format": "raw"
          },
          {
            "path": "quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "message",
            "label": "Message",
            "format": "raw"
          },
          {
            "path": "maxCount",
            "label": "Max Count",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "relayerFeePct",
          "quoteTimestamp",
          "message",
          "maxCount"
        ]
      },
      "startBridgeTokensViaAcrossNativePacked()": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [],
        "required": []
      },
      "transferOwnership(address)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "newOwner",
            "label": "New Owner",
            "format": "addressName"
          }
        ],
        "required": [
          "newOwner"
        ]
      },
      "startBridgeTokensViaAcrossV3ERC20Min(tuple,address,uint256)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "parameters.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "parameters.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "parameters.depositor",
            "label": "Depositor",
            "format": "addressName"
          },
          {
            "path": "parameters.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "parameters.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "parameters.outputAmount",
            "label": "Output Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "parameters.receivingAssetId"
            }
          },
          {
            "path": "parameters.exclusiveRelayer",
            "label": "Exclusive Relayer",
            "format": "addressName"
          },
          {
            "path": "parameters.quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "parameters.fillDeadline",
            "label": "Fill Deadline",
            "format": "raw"
          },
          {
            "path": "parameters.exclusivityDeadline",
            "label": "Exclusivity Deadline",
            "format": "raw"
          },
          {
            "path": "parameters.message",
            "label": "Message",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "inputAmount",
            "label": "Input Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          }
        ],
        "required": [
          "parameters.transactionId",
          "parameters.receiver",
          "parameters.destinationChainId",
          "sendingAssetId",
          "inputAmount"
        ]
      },
      "startBridgeTokensViaAcrossV3ERC20Packed()": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaAcrossV3NativeMin(tuple)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "parameters.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "parameters.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "parameters.depositor",
            "label": "Depositor",
            "format": "addressName"
          },
          {
            "path": "parameters.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "parameters.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "parameters.outputAmount",
            "label": "Output Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "parameters.receivingAssetId"
            }
          },
          {
            "path": "parameters.exclusiveRelayer",
            "label": "Exclusive Relayer",
            "format": "addressName"
          },
          {
            "path": "parameters.quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "parameters.fillDeadline",
            "label": "Fill Deadline",
            "format": "raw"
          },
          {
            "path": "parameters.exclusivityDeadline",
            "label": "Exclusivity Deadline",
            "format": "raw"
          },
          {
            "path": "parameters.message",
            "label": "Message",
            "format": "raw"
          }
        ],
        "required": [
          "parameters.transactionId",
          "parameters.receiver",
          "parameters.destinationChainId"
        ]
      },
      "startBridgeTokensViaAcrossV3NativePacked()": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaAcrossV3(tuple,tuple)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "acrossData.receiverAddress",
            "label": "Receiver Address",
            "format": "addressName"
          },
          {
            "path": "acrossData.refundAddress",
            "label": "Refund Address",
            "format": "addressName"
          },
          {
            "path": "acrossData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "acrossData.outputAmount",
            "label": "Output Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "acrossData.receivingAssetId"
            }
          },
          {
            "path": "acrossData.outputAmountPercent",
            "label": "Output Amount Percent",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "acrossData.receivingAssetId"
            }
          },
          {
            "path": "acrossData.exclusiveRelayer",
            "label": "Exclusive Relayer",
            "format": "addressName"
          },
          {
            "path": "acrossData.quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "acrossData.fillDeadline",
            "label": "Fill Deadline",
            "format": "raw"
          },
          {
            "path": "acrossData.exclusivityDeadline",
            "label": "Exclusivity Deadline",
            "format": "raw"
          },
          {
            "path": "acrossData.message",
            "label": "Message",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "acrossData.receiverAddress"
        ]
      },
      "swapAndStartBridgeTokensViaAcrossV3(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "acrossData.receiverAddress",
            "label": "Receiver Address",
            "format": "addressName"
          },
          {
            "path": "acrossData.refundAddress",
            "label": "Refund Address",
            "format": "addressName"
          },
          {
            "path": "acrossData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "acrossData.outputAmount",
            "label": "Output Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "acrossData.receivingAssetId"
            }
          },
          {
            "path": "acrossData.outputAmountPercent",
            "label": "Output Amount Percent",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "acrossData.receivingAssetId"
            }
          },
          {
            "path": "acrossData.exclusiveRelayer",
            "label": "Exclusive Relayer",
            "format": "addressName"
          },
          {
            "path": "acrossData.quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "acrossData.fillDeadline",
            "label": "Fill Deadline",
            "format": "raw"
          },
          {
            "path": "acrossData.exclusivityDeadline",
            "label": "Exclusivity Deadline",
            "format": "raw"
          },
          {
            "path": "acrossData.message",
            "label": "Message",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId",
          "acrossData.receiverAddress"
        ]
      },
      "startBridgeTokensViaAllBridge(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "allBridgeData.fees",
            "label": "Fees",
            "format": "tokenAmount"
          },
          {
            "path": "allBridgeData.recipient",
            "label": "Recipient",
            "format": "raw"
          },
          {
            "path": "allBridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "allBridgeData.receiveToken",
            "label": "Receive Token",
            "format": "raw"
          },
          {
            "path": "allBridgeData.nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "allBridgeData.messenger",
            "label": "Messenger",
            "format": "raw"
          },
          {
            "path": "allBridgeData.payFeeWithSendingAsset",
            "label": "Pay Fee With Sending Asset",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "allBridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaAllBridge(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "allBridgeData.fees",
            "label": "Fees",
            "format": "tokenAmount"
          },
          {
            "path": "allBridgeData.recipient",
            "label": "Recipient",
            "format": "raw"
          },
          {
            "path": "allBridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "allBridgeData.receiveToken",
            "label": "Receive Token",
            "format": "raw"
          },
          {
            "path": "allBridgeData.nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "allBridgeData.messenger",
            "label": "Messenger",
            "format": "raw"
          },
          {
            "path": "allBridgeData.payFeeWithSendingAsset",
            "label": "Pay Fee With Sending Asset",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId",
          "allBridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaArbitrumBridge(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "arbitrumData.maxSubmissionCost",
            "label": "Max Submission Cost",
            "format": "raw"
          },
          {
            "path": "arbitrumData.maxGas",
            "label": "Max Gas",
            "format": "raw"
          },
          {
            "path": "arbitrumData.maxGasPrice",
            "label": "Max Gas Price",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaArbitrumBridge(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "arbitrumData.maxSubmissionCost",
            "label": "Max Submission Cost",
            "format": "raw"
          },
          {
            "path": "arbitrumData.maxGas",
            "label": "Max Gas",
            "format": "raw"
          },
          {
            "path": "arbitrumData.maxGasPrice",
            "label": "Max Gas Price",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaCBridge(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "cBridgeData.maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          },
          {
            "path": "cBridgeData.nonce",
            "label": "Nonce",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaCBridge(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "cBridgeData.maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          },
          {
            "path": "cBridgeData.nonce",
            "label": "Nonce",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "triggerRefund(address,bytes,address,address,uint256)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "assetAddress",
            "label": "Asset Address",
            "format": "addressName"
          },
          {
            "path": "to",
            "label": "To",
            "format": "addressName"
          },
          {
            "path": "amount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "assetAddress"
            }
          }
        ],
        "required": [
          "callTo",
          "callData",
          "assetAddress",
          "to",
          "amount"
        ]
      },
      "startBridgeTokensViaCBridgeERC20Min(bytes32,address,uint64,address,uint256,uint64,uint32)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "amount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "sendingAssetId",
          "amount",
          "nonce",
          "maxSlippage"
        ]
      },
      "startBridgeTokensViaCBridgeERC20Packed()": {
        "intent": "Bridge tokens",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaCBridgeNativeMin(bytes32,address,uint64,uint64,uint32)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "nonce",
          "maxSlippage"
        ]
      },
      "startBridgeTokensViaCBridgeNativePacked()": {
        "intent": "Bridge tokens",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaCelerCircleBridge(tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaCelerCircleBridge(tuple,tuple[])": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaCelerIM(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "celerIMData.maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          },
          {
            "path": "celerIMData.nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "celerIMData.callTo",
            "label": "Call To",
            "format": "raw"
          },
          {
            "path": "celerIMData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "celerIMData.messageBusFee",
            "label": "Message Bus Fee",
            "format": "tokenAmount"
          },
          {
            "path": "celerIMData.bridgeType",
            "label": "Bridge Type",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaCelerIM(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "celerIMData.maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          },
          {
            "path": "celerIMData.nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "celerIMData.callTo",
            "label": "Call To",
            "format": "raw"
          },
          {
            "path": "celerIMData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "celerIMData.messageBusFee",
            "label": "Message Bus Fee",
            "format": "tokenAmount"
          },
          {
            "path": "celerIMData.bridgeType",
            "label": "Bridge Type",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "diamondCut(tuple[],address,bytes)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "diamondCut.[0].facetAddress",
            "label": "Facet Address",
            "format": "addressName"
          },
          {
            "path": "diamondCut.[0].action",
            "label": "Action",
            "format": "raw"
          },
          {
            "path": "diamondCut.[0].functionSelectors",
            "label": "Function Selectors",
            "format": "raw"
          },
          {
            "path": "init",
            "label": "Init",
            "format": "addressName"
          },
          {
            "path": "calldata",
            "label": "Calldata",
            "format": "raw"
          }
        ],
        "required": [
          "init",
          "calldata"
        ]
      },
      "pauseDiamond()": {
        "intent": "Execute function",
        "fields": [],
        "required": []
      },
      "removeFacet(address)": {
        "intent": "Remove Facet",
        "fields": [
          {
            "path": "facetAddress",
            "label": "Facet Address",
            "format": "addressName"
          }
        ],
        "required": [
          "facetAddress"
        ]
      },
      "unpauseDiamond(address[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "blacklist",
            "label": "Blacklist",
            "format": "raw"
          }
        ],
        "required": [
          "blacklist"
        ]
      },
      "swapTokensGeneric(bytes32,string,string,address,uint256,tuple[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "minAmount",
            "label": "Min Amount",
            "format": "tokenAmount"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "integrator",
          "referrer",
          "receiver",
          "minAmount",
          "swapData.[0].receivingAssetId"
        ]
      },
      "swapTokensMultipleV3ERC20ToERC20(bytes32,string,string,address,uint256,tuple[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "integrator",
          "referrer",
          "receiver",
          "minAmountOut",
          "swapData.[0].receivingAssetId"
        ]
      },
      "swapTokensMultipleV3ERC20ToNative(bytes32,string,string,address,uint256,tuple[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "integrator",
          "referrer",
          "receiver",
          "minAmountOut",
          "swapData.[0].receivingAssetId"
        ]
      },
      "swapTokensMultipleV3NativeToERC20(bytes32,string,string,address,uint256,tuple[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "integrator",
          "referrer",
          "receiver",
          "minAmountOut",
          "swapData.[0].receivingAssetId"
        ]
      },
      "swapTokensSingleV3ERC20ToERC20(bytes32,string,string,address,uint256,tuple)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "swapData.callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.sendingAssetId"
            }
          },
          {
            "path": "swapData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "integrator",
          "referrer",
          "receiver",
          "minAmountOut",
          "swapData.sendingAssetId"
        ]
      },
      "swapTokensSingleV3ERC20ToNative(bytes32,string,string,address,uint256,tuple)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "swapData.callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.sendingAssetId"
            }
          },
          {
            "path": "swapData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "integrator",
          "referrer",
          "receiver",
          "minAmountOut",
          "swapData.sendingAssetId"
        ]
      },
      "swapTokensSingleV3NativeToERC20(bytes32,string,string,address,uint256,tuple)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "swapData.callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.sendingAssetId"
            }
          },
          {
            "path": "swapData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "integrator",
          "referrer",
          "receiver",
          "minAmountOut",
          "swapData.sendingAssetId"
        ]
      },
      "startBridgeTokensViaXDaiBridge(tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaXDaiBridge(tuple,tuple[])": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "setApprovalForBridges(address[],address[])": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridges",
            "label": "Bridges",
            "format": "raw"
          },
          {
            "path": "tokensToApprove",
            "label": "Tokens To Approve",
            "format": "raw"
          }
        ],
        "required": [
          "bridges",
          "tokensToApprove"
        ]
      },
      "startBridgeTokensViaHopL1ERC20(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          },
          {
            "path": "hopData.relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaHopL1Native(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          },
          {
            "path": "hopData.relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaHopL2ERC20(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          },
          {
            "path": "hopData.relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaHopL2Native(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          },
          {
            "path": "hopData.relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaHopL1ERC20(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          },
          {
            "path": "hopData.relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "swapAndStartBridgeTokensViaHopL1Native(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          },
          {
            "path": "hopData.relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "swapAndStartBridgeTokensViaHopL2ERC20(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          },
          {
            "path": "hopData.relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "swapAndStartBridgeTokensViaHopL2Native(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          },
          {
            "path": "hopData.relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "setApprovalForHopBridges(address[],address[])": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridges",
            "label": "Bridges",
            "format": "raw"
          },
          {
            "path": "tokensToApprove",
            "label": "Tokens To Approve",
            "format": "raw"
          }
        ],
        "required": [
          "bridges",
          "tokensToApprove"
        ]
      },
      "startBridgeTokensViaHopL1ERC20Min(bytes8,address,uint256,address,uint256,uint256,address,uint256,address)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "sendingAssetId",
          "minAmount",
          "destinationAmountOutMin",
          "relayer",
          "relayerFee",
          "hopBridge"
        ]
      },
      "startBridgeTokensViaHopL1ERC20Packed()": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaHopL1NativeMin(bytes8,address,uint256,uint256,address,uint256,address)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "relayer",
            "label": "Relayer",
            "format": "addressName"
          },
          {
            "path": "relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "destinationAmountOutMin",
          "relayer",
          "relayerFee",
          "hopBridge"
        ]
      },
      "startBridgeTokensViaHopL1NativePacked()": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaHopL2ERC20Min(bytes8,address,uint256,address,uint256,uint256,uint256,uint256,uint256,address)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "sendingAssetId",
          "minAmount",
          "bonderFee",
          "amountOutMin",
          "destinationAmountOutMin",
          "destinationDeadline",
          "hopBridge"
        ]
      },
      "startBridgeTokensViaHopL2ERC20Packed()": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaHopL2NativeMin(bytes8,address,uint256,uint256,uint256,uint256,uint256,address)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopBridge",
            "label": "Hop Bridge",
            "format": "addressName"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "bonderFee",
          "amountOutMin",
          "destinationAmountOutMin",
          "destinationDeadline",
          "hopBridge"
        ]
      },
      "startBridgeTokensViaHopL2NativePacked()": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaOmniBridge(tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaOmniBridge(tuple,tuple[])": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "initOptimism(tuple[],address)": {
        "intent": "Initialize Optimism",
        "fields": [
          {
            "path": "configs.[0].assetId",
            "label": "Asset Id",
            "format": "addressName"
          },
          {
            "path": "configs.[0].bridge",
            "label": "Bridge",
            "format": "addressName"
          },
          {
            "path": "standardBridge",
            "label": "Standard Bridge",
            "format": "addressName"
          }
        ],
        "required": [
          "standardBridge"
        ]
      },
      "registerOptimismBridge(address,address)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "assetId",
            "label": "Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridge",
            "label": "Bridge",
            "format": "addressName"
          }
        ],
        "required": [
          "assetId",
          "bridge"
        ]
      },
      "startBridgeTokensViaOptimismBridge(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "optimismData.assetIdOnL2",
            "label": "Asset Id On L2",
            "format": "addressName"
          },
          {
            "path": "optimismData.l2Gas",
            "label": "L2 Gas",
            "format": "raw"
          },
          {
            "path": "optimismData.isSynthetix",
            "label": "Is Synthetix",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaOptimismBridge(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "optimismData.assetIdOnL2",
            "label": "Asset Id On L2",
            "format": "addressName"
          },
          {
            "path": "optimismData.l2Gas",
            "label": "L2 Gas",
            "format": "raw"
          },
          {
            "path": "optimismData.isSynthetix",
            "label": "Is Synthetix",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "registerPeripheryContract(string,address)": {
        "intent": "Register PeripheryContract",
        "fields": [
          {
            "path": "name",
            "label": "Name",
            "format": "raw"
          },
          {
            "path": "contractAddress",
            "label": "Contract Address",
            "format": "addressName"
          }
        ],
        "required": [
          "name",
          "contractAddress"
        ]
      },
      "startBridgeTokensViaPolygonBridge(tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaPolygonBridge(tuple,tuple[])": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaRelay(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "relayData.requestId",
            "label": "Request Id",
            "format": "raw"
          },
          {
            "path": "relayData.nonEVMReceiver",
            "label": "Non E V M Receiver",
            "format": "raw"
          },
          {
            "path": "relayData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "raw"
          },
          {
            "path": "relayData.signature",
            "label": "Signature",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaRelay(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "relayData.requestId",
            "label": "Request Id",
            "format": "raw"
          },
          {
            "path": "relayData.nonEVMReceiver",
            "label": "Non E V M Receiver",
            "format": "raw"
          },
          {
            "path": "relayData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "raw"
          },
          {
            "path": "relayData.signature",
            "label": "Signature",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaSquid(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "squidData.routeType",
            "label": "Route Type",
            "format": "raw"
          },
          {
            "path": "squidData.destinationChain",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "squidData.destinationAddress",
            "label": "Destination Address",
            "format": "raw"
          },
          {
            "path": "squidData.bridgedTokenSymbol",
            "label": "Bridged Token Symbol",
            "format": "raw"
          },
          {
            "path": "squidData.depositAssetId",
            "label": "Deposit Asset Id",
            "format": "addressName"
          },
          {
            "path": "squidData.sourceCalls",
            "label": "Source Calls",
            "format": "raw"
          },
          {
            "path": "squidData.payload",
            "label": "Payload",
            "format": "raw"
          },
          {
            "path": "squidData.fee",
            "label": "Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "squidData.depositAssetId"
            }
          },
          {
            "path": "squidData.enableExpress",
            "label": "Enable Express",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaSquid(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "squidData.routeType",
            "label": "Route Type",
            "format": "raw"
          },
          {
            "path": "squidData.destinationChain",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "squidData.destinationAddress",
            "label": "Destination Address",
            "format": "raw"
          },
          {
            "path": "squidData.bridgedTokenSymbol",
            "label": "Bridged Token Symbol",
            "format": "raw"
          },
          {
            "path": "squidData.depositAssetId",
            "label": "Deposit Asset Id",
            "format": "addressName"
          },
          {
            "path": "squidData.sourceCalls",
            "label": "Source Calls",
            "format": "raw"
          },
          {
            "path": "squidData.payload",
            "label": "Payload",
            "format": "raw"
          },
          {
            "path": "squidData.fee",
            "label": "Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "squidData.depositAssetId"
            }
          },
          {
            "path": "squidData.enableExpress",
            "label": "Enable Express",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaStargate(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "stargateData.assetId",
            "label": "Asset Id",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams",
            "label": "Send Params",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.dstEid",
            "label": "Dst Eid",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.to",
            "label": "To",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.amountLD",
            "label": "Amount L D",
            "format": "tokenAmount"
          },
          {
            "path": "stargateData.sendParams.minAmountLD",
            "label": "Min Amount L D",
            "format": "tokenAmount"
          },
          {
            "path": "stargateData.sendParams.extraOptions",
            "label": "Extra Options",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.composeMsg",
            "label": "Compose Msg",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.oftCmd",
            "label": "Oft Cmd",
            "format": "raw"
          },
          {
            "path": "stargateData.fee",
            "label": "Fee",
            "format": "raw"
          },
          {
            "path": "stargateData.fee.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          },
          {
            "path": "stargateData.fee.lzTokenFee",
            "label": "Lz Token Fee",
            "format": "tokenAmount"
          },
          {
            "path": "stargateData.refundAddress",
            "label": "Refund Address",
            "format": "addressName"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "stargateData.sendParams.minAmountLD"
        ]
      },
      "swapAndStartBridgeTokensViaStargate(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "stargateData.assetId",
            "label": "Asset Id",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams",
            "label": "Send Params",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.dstEid",
            "label": "Dst Eid",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.to",
            "label": "To",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.amountLD",
            "label": "Amount L D",
            "format": "tokenAmount"
          },
          {
            "path": "stargateData.sendParams.minAmountLD",
            "label": "Min Amount L D",
            "format": "tokenAmount"
          },
          {
            "path": "stargateData.sendParams.extraOptions",
            "label": "Extra Options",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.composeMsg",
            "label": "Compose Msg",
            "format": "raw"
          },
          {
            "path": "stargateData.sendParams.oftCmd",
            "label": "Oft Cmd",
            "format": "raw"
          },
          {
            "path": "stargateData.fee",
            "label": "Fee",
            "format": "raw"
          },
          {
            "path": "stargateData.fee.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          },
          {
            "path": "stargateData.fee.lzTokenFee",
            "label": "Lz Token Fee",
            "format": "tokenAmount"
          },
          {
            "path": "stargateData.refundAddress",
            "label": "Refund Address",
            "format": "addressName"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId",
          "stargateData.sendParams.minAmountLD"
        ]
      },
      "startBridgeTokensViaSymbiosis(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "symbiosisData.firstSwapCalldata",
            "label": "First Swap Calldata",
            "format": "raw"
          },
          {
            "path": "symbiosisData.secondSwapCalldata",
            "label": "Second Swap Calldata",
            "format": "raw"
          },
          {
            "path": "symbiosisData.intermediateToken",
            "label": "Intermediate Token",
            "format": "addressName"
          },
          {
            "path": "symbiosisData.firstDexRouter",
            "label": "First Dex Router",
            "format": "addressName"
          },
          {
            "path": "symbiosisData.secondDexRouter",
            "label": "Second Dex Router",
            "format": "addressName"
          },
          {
            "path": "symbiosisData.approvedTokens",
            "label": "Approved Tokens",
            "format": "raw"
          },
          {
            "path": "symbiosisData.callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "symbiosisData.callData",
            "label": "Call Data",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaSymbiosis(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "symbiosisData.firstSwapCalldata",
            "label": "First Swap Calldata",
            "format": "raw"
          },
          {
            "path": "symbiosisData.secondSwapCalldata",
            "label": "Second Swap Calldata",
            "format": "raw"
          },
          {
            "path": "symbiosisData.intermediateToken",
            "label": "Intermediate Token",
            "format": "addressName"
          },
          {
            "path": "symbiosisData.firstDexRouter",
            "label": "First Dex Router",
            "format": "addressName"
          },
          {
            "path": "symbiosisData.secondDexRouter",
            "label": "Second Dex Router",
            "format": "addressName"
          },
          {
            "path": "symbiosisData.approvedTokens",
            "label": "Approved Tokens",
            "format": "raw"
          },
          {
            "path": "symbiosisData.callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "symbiosisData.callData",
            "label": "Call Data",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaThorSwap(tuple,tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "thorSwapData.vault",
            "label": "Vault",
            "format": "addressName"
          },
          {
            "path": "thorSwapData.memo",
            "label": "Memo",
            "format": "raw"
          },
          {
            "path": "thorSwapData.expiration",
            "label": "Expiration",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaThorSwap(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "thorSwapData.vault",
            "label": "Vault",
            "format": "addressName"
          },
          {
            "path": "thorSwapData.memo",
            "label": "Memo",
            "format": "raw"
          },
          {
            "path": "thorSwapData.expiration",
            "label": "Expiration",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "withdraw(address,address,uint256)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "assetAddress",
            "label": "Asset Address",
            "format": "addressName"
          },
          {
            "path": "to",
            "label": "To",
            "format": "addressName"
          },
          {
            "path": "amount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "assetAddress"
            }
          }
        ],
        "required": [
          "assetAddress",
          "to",
          "amount"
        ]
      },
      "startBridgeTokensViaChainflip(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "chainflipData.nonEVMReceiver",
            "label": "Non E V M Receiver",
            "format": "raw"
          },
          {
            "path": "chainflipData.dstToken",
            "label": "Dst Token",
            "format": "raw"
          },
          {
            "path": "chainflipData.dstCallReceiver",
            "label": "Dst Call Receiver",
            "format": "addressName"
          },
          {
            "path": "chainflipData.dstCallSwapData",
            "label": "Dst Call Swap Data",
            "format": "raw"
          },
          {
            "path": "chainflipData.gasAmount",
            "label": "Gas Amount",
            "format": "tokenAmount"
          },
          {
            "path": "chainflipData.cfParameters",
            "label": "Cf Parameters",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaChainflip(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "chainflipData.nonEVMReceiver",
            "label": "Non E V M Receiver",
            "format": "raw"
          },
          {
            "path": "chainflipData.dstToken",
            "label": "Dst Token",
            "format": "raw"
          },
          {
            "path": "chainflipData.dstCallReceiver",
            "label": "Dst Call Receiver",
            "format": "addressName"
          },
          {
            "path": "chainflipData.dstCallSwapData",
            "label": "Dst Call Swap Data",
            "format": "raw"
          },
          {
            "path": "chainflipData.gasAmount",
            "label": "Gas Amount",
            "format": "tokenAmount"
          },
          {
            "path": "chainflipData.cfParameters",
            "label": "Cf Parameters",
            "format": "raw"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaGlacis(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "glacisData.refundAddress",
            "label": "Refund Address",
            "format": "addressName"
          },
          {
            "path": "glacisData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaGlacis(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "bridgeData.referrer",
            "label": "Referrer",
            "format": "addressName"
          },
          {
            "path": "bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "bridgeData.receiver",
            "label": "Receiver",
            "format": "addressName"
          },
          {
            "path": "bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "bridgeData.sendingAssetId"
            }
          },
          {
            "path": "bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "swapData.[0].callTo",
            "label": "Call To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].approveTo",
            "label": "Approve To",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressName"
          },
          {
            "path": "swapData.[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "swapData.[0].sendingAssetId"
            }
          },
          {
            "path": "swapData.[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "swapData.[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "glacisData.refundAddress",
            "label": "Refund Address",
            "format": "addressName"
          },
          {
            "path": "glacisData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "bridgeData.transactionId",
          "bridgeData.sendingAssetId",
          "bridgeData.receiver",
          "bridgeData.minAmount",
          "bridgeData.destinationChainId",
          "swapData.[0].receivingAssetId"
        ]
      },
      "initDeBridgeDln(tuple[])": {
        "intent": "Bridge tokens via DeBridge DLN",
        "fields": [
          {
            "path": "chainIdConfigs.[0].chainId",
            "label": "Chain Id",
            "format": "raw"
          },
          {
            "path": "chainIdConfigs.[0].deBridgeChainId",
            "label": "De Bridge Chain Id",
            "format": "raw"
          }
        ],
        "required": []
      },
      "setDeBridgeChainId(uint256,uint256)": {
        "intent": "Bridge tokens via DeBridge DLN",
        "fields": [
          {
            "path": "chainId",
            "label": "Chain Id",
            "format": "raw"
          },
          {
            "path": "deBridgeChainId",
            "label": "De Bridge Chain Id",
            "format": "raw"
          }
        ],
        "required": [
          "chainId",
          "deBridgeChainId"
        ]
      }
    }
  }
}
