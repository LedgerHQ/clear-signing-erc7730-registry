{
  "$schema": "../../specs/erc7730-v1.schema.json",
  "context": {
    "$id": "LiFi Diamond Contract",
    "contract": {
      "abi": "https://raw.githubusercontent.com/lifinance/lifi-contract-types/refs/heads/main/dist/diamond.json",
      "deployments": [
        {
          "chainId": 1,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 137,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 42161,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 10,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 56,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 43114,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 100,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 250,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 324,
          "address": "0x341e94069f53234fE6DabeF707aD424830525715"
        },
        {
          "chainId": 8453,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 59144,
          "address": "0xDE1E598b81620773454588B85D6b5D4eEC32573e"
        },
        {
          "chainId": 5000,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 534352,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 42220,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1284,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1285,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1313161554,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1088,
          "address": "0x24ca98fB6972F5eE05f0dB00595c7f68D9FaFd68"
        },
        {
          "chainId": 25,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 1666600000,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 122,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 288,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 106,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 9001,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 42170,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 167004,
          "address": "0x3A9A5dBa8FE1C4Da98187cE4755701BCA182f63b"
        },
        {
          "chainId": 204,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 81457,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 252,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        },
        {
          "chainId": 34443,
          "address": "0x1231DEB6f5749EF6cE6943a275A1D3E7486F4EaE"
        }
      ]
    }
  },
  "metadata": {
    "owner": "LiFi",
    "info": {
      "legalName": "LI.FI GmbH",
      "url": "https://li.fi/",
      "deploymentDate": "2022-01-01T00:00:00Z"
    },
    "constants": {
      "nativeAssetAddress": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
    }
  },
  "display": {
    "formats": {
      "startBridgeTokensViaAcross(tuple,tuple)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_acrossData.relayerFeePct",
            "label": "Relayer Fee",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaAcross(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].receivingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_acrossData.relayerFeePct",
            "label": "Relayer Fee",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_swapData[0].receivingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaHop(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaHop(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].receivingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].receivingAssetId"
            }
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_swapData[0].receivingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaMayan(tuple,tuple)": {
        "intent": "Bridge tokens via Mayan Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_mayanData.nonEVMReceiver",
            "label": "Non-EVM Receiver",
            "format": "raw"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaGasZip(tuple,tuple)": {
        "intent": "Bridge tokens via GasZip",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_gasZipData.receiverAddress",
            "label": "Receiver Address",
            "format": "raw"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_gasZipData.destinationChains",
            "label": "Destination Chains",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaGasZip(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via GasZip",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].receivingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_gasZipData.destinationChains",
            "label": "Destination Chains",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_swapData[0].receivingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaMayan(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Mayan Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_mayanData.nonEVMReceiver",
            "label": "Non-EVM Receiver",
            "format": "raw"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].receivingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_swapData[0].receivingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaAcrossERC20Min(bytes32,address,uint256,address,uint64,int64,uint32)": {
        "intent": "Bridge ERC20 tokens via Across Protocol (Minimal)",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Token",
            "format": "addressOrName"
          },
          {
            "path": "minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "relayerFeePct",
            "label": "Relayer Fee",
            "format": "raw"
          },
          {
            "path": "quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "sendingAssetId",
          "minAmount",
          "receiver",
          "destinationChainId"
        ]
      },
      "startBridgeTokensViaAcrossNativeMin(bytes32,address,uint64,int64,uint32)": {
        "intent": "Bridge native tokens via Across Protocol (Minimal)",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "relayerFeePct",
            "label": "Relayer Fee",
            "format": "raw"
          },
          {
            "path": "quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId"
        ]
      },
      "startBridgeTokensViaDeBridgeDln(tuple,tuple)": {
        "intent": "Bridge tokens via DeBridge DLN",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_deBridgeData.minAmountOut",
            "label": "Minimum Amount Out",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaDeBridgeDln(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via DeBridge DLN",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction ID",
            "format": "raw"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Source Token",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Destination Token",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Minimum Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].receivingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_deBridgeData.minAmountOut",
            "label": "Minimum Amount Out",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_swapData[0].receivingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "executeCallAndWithdraw(address,bytes,address,address,uint256)": {
        "intent": "Execute call and withdraw",
        "fields": [
          {
            "path": "_callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_assetAddress",
            "label": "Asset Address",
            "format": "addressOrName"
          },
          {
            "path": "_to",
            "label": "Recipient",
            "format": "addressOrName"
          },
          {
            "path": "_amount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_assetAddress"
            }
          }
        ],
        "required": [
          "_callTo",
          "_assetAddress",
          "_to",
          "_amount"
        ]
      },
      "setApprovalForBridge(address[])": {
        "intent": "Set approval for bridge",
        "fields": [
          {
            "path": "tokensToApprove",
            "label": "Tokens To Approve",
            "format": "raw"
          }
        ],
        "required": [
          "tokensToApprove"
        ]
      },
      "addDex(address)": {
        "intent": "Add DEX",
        "fields": [
          {
            "path": "_dex",
            "label": "DEX Address",
            "format": "addressOrName"
          }
        ],
        "required": [
          "_dex"
        ]
      },
      "removeDex(address)": {
        "intent": "Remove DEX",
        "fields": [
          {
            "path": "_dex",
            "label": "DEX Address",
            "format": "addressOrName"
          }
        ],
        "required": [
          "_dex"
        ]
      },
      "batchAddDex(address[])": {
        "intent": "Batch add DEXs",
        "fields": [
          {
            "path": "_dexs",
            "label": "DEX Addresses",
            "format": "raw"
          }
        ],
        "required": [
          "_dexs"
        ]
      },
      "batchRemoveDex(address[])": {
        "intent": "Batch remove DEXs",
        "fields": [
          {
            "path": "_dexs",
            "label": "DEX Addresses",
            "format": "raw"
          }
        ],
        "required": [
          "_dexs"
        ]
      },
      "setFunctionApprovalBySignature(bytes4,bool)": {
        "intent": "Set function approval by signature",
        "fields": [
          {
            "path": "_signature",
            "label": "Function Signature",
            "format": "raw"
          },
          {
            "path": "_approval",
            "label": "Approval",
            "format": "raw"
          }
        ],
        "required": [
          "_signature",
          "_approval"
        ]
      },
      "batchSetFunctionApprovalBySignature(bytes4[],bool)": {
        "intent": "Batch set function approval by signature",
        "fields": [
          {
            "path": "_signatures",
            "label": "Function Signatures",
            "format": "raw"
          },
          {
            "path": "_approval",
            "label": "Approval",
            "format": "raw"
          }
        ],
        "required": [
          "_signatures",
          "_approval"
        ]
      },
      "setCanExecute(bytes4,address,bool)": {
        "intent": "Set execution permission",
        "fields": [
          {
            "path": "_selector",
            "label": "Function Selector",
            "format": "raw"
          },
          {
            "path": "_executor",
            "label": "Executor",
            "format": "addressOrName"
          },
          {
            "path": "_canExecute",
            "label": "Can Execute",
            "format": "raw"
          }
        ],
        "required": [
          "_selector",
          "_executor",
          "_canExecute"
        ]
      },
      "registerBridge(address,address)": {
        "intent": "Register bridge",
        "fields": [
          {
            "path": "assetId",
            "label": "Asset ID",
            "format": "addressOrName"
          },
          {
            "path": "bridge",
            "label": "Bridge Address",
            "format": "addressOrName"
          }
        ],
        "required": [
          "assetId",
          "bridge"
        ]
      },
      "initHop(tuple[])": {
        "intent": "Initialize Hop Protocol",
        "fields": [
          {
            "path": "configs",
            "label": "Configurations",
            "format": "raw"
          }
        ],
        "required": [
          "configs"
        ]
      },
      "cancelOwnershipTransfer()": {
        "intent": "Execute function",
        "fields": [],
        "required": []
      },
      "confirmOwnershipTransfer()": {
        "intent": "Execute function",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaAcrossERC20Min(bytes32,address,uint256,address,uint64,int64,uint32,bytes,uint256)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "relayerFeePct",
            "label": "Relayer Fee Pct",
            "format": "raw"
          },
          {
            "path": "quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "message",
            "label": "Message",
            "format": "raw"
          },
          {
            "path": "maxCount",
            "label": "Max Count",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "sendingAssetId",
          "minAmount",
          "receiver",
          "destinationChainId",
          "relayerFeePct",
          "quoteTimestamp",
          "message",
          "maxCount"
        ]
      },
      "startBridgeTokensViaAcrossERC20Packed()": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaAcrossNativeMin(bytes32,address,uint256,int64,uint32,bytes,uint256)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "relayerFeePct",
            "label": "Relayer Fee Pct",
            "format": "raw"
          },
          {
            "path": "quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "message",
            "label": "Message",
            "format": "raw"
          },
          {
            "path": "maxCount",
            "label": "Max Count",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "relayerFeePct",
          "quoteTimestamp",
          "message",
          "maxCount"
        ]
      },
      "startBridgeTokensViaAcrossNativePacked()": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [],
        "required": []
      },
      "transferOwnership(address)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_newOwner",
            "label": "New Owner",
            "format": "addressOrName"
          }
        ],
        "required": [
          "_newOwner"
        ]
      },
      "startBridgeTokensViaAcrossV3ERC20Min(tuple,address,uint256)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "_parameters.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_parameters.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_parameters.depositor",
            "label": "Depositor",
            "format": "addressOrName"
          },
          {
            "path": "_parameters.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_parameters.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_parameters.outputAmount",
            "label": "Output Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_parameters.receivingAssetId"
            }
          },
          {
            "path": "_parameters.exclusiveRelayer",
            "label": "Exclusive Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_parameters.quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "_parameters.fillDeadline",
            "label": "Fill Deadline",
            "format": "raw"
          },
          {
            "path": "_parameters.exclusivityDeadline",
            "label": "Exclusivity Deadline",
            "format": "raw"
          },
          {
            "path": "_parameters.message",
            "label": "Message",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "inputAmount",
            "label": "Input Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          }
        ],
        "required": [
          "_parameters.transactionId",
          "_parameters.receiver",
          "_parameters.destinationChainId",
          "sendingAssetId",
          "inputAmount"
        ]
      },
      "startBridgeTokensViaAcrossV3ERC20Packed()": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaAcrossV3NativeMin(tuple)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "_parameters.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_parameters.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_parameters.depositor",
            "label": "Depositor",
            "format": "addressOrName"
          },
          {
            "path": "_parameters.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_parameters.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_parameters.outputAmount",
            "label": "Output Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_parameters.receivingAssetId"
            }
          },
          {
            "path": "_parameters.exclusiveRelayer",
            "label": "Exclusive Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_parameters.quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "_parameters.fillDeadline",
            "label": "Fill Deadline",
            "format": "raw"
          },
          {
            "path": "_parameters.exclusivityDeadline",
            "label": "Exclusivity Deadline",
            "format": "raw"
          },
          {
            "path": "_parameters.message",
            "label": "Message",
            "format": "raw"
          }
        ],
        "required": [
          "_parameters.transactionId",
          "_parameters.receiver",
          "_parameters.destinationChainId"
        ]
      },
      "startBridgeTokensViaAcrossV3NativePacked()": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaAcrossV3(tuple,tuple)": {
        "intent": "Bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_acrossData.receiverAddress",
            "label": "Receiver Address",
            "format": "addressOrName"
          },
          {
            "path": "_acrossData.refundAddress",
            "label": "Refund Address",
            "format": "addressOrName"
          },
          {
            "path": "_acrossData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_acrossData.outputAmount",
            "label": "Output Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_acrossData.receivingAssetId"
            }
          },
          {
            "path": "_acrossData.outputAmountPercent",
            "label": "Output Amount Percent",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_acrossData.receivingAssetId"
            }
          },
          {
            "path": "_acrossData.exclusiveRelayer",
            "label": "Exclusive Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_acrossData.quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "_acrossData.fillDeadline",
            "label": "Fill Deadline",
            "format": "raw"
          },
          {
            "path": "_acrossData.exclusivityDeadline",
            "label": "Exclusivity Deadline",
            "format": "raw"
          },
          {
            "path": "_acrossData.message",
            "label": "Message",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_acrossData.receiverAddress"
        ]
      },
      "swapAndStartBridgeTokensViaAcrossV3(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Across Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_acrossData.receiverAddress",
            "label": "Receiver Address",
            "format": "addressOrName"
          },
          {
            "path": "_acrossData.refundAddress",
            "label": "Refund Address",
            "format": "addressOrName"
          },
          {
            "path": "_acrossData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_acrossData.outputAmount",
            "label": "Output Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_acrossData.receivingAssetId"
            }
          },
          {
            "path": "_acrossData.outputAmountPercent",
            "label": "Output Amount Percent",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_acrossData.receivingAssetId"
            }
          },
          {
            "path": "_acrossData.exclusiveRelayer",
            "label": "Exclusive Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_acrossData.quoteTimestamp",
            "label": "Quote Timestamp",
            "format": "raw"
          },
          {
            "path": "_acrossData.fillDeadline",
            "label": "Fill Deadline",
            "format": "raw"
          },
          {
            "path": "_acrossData.exclusivityDeadline",
            "label": "Exclusivity Deadline",
            "format": "raw"
          },
          {
            "path": "_acrossData.message",
            "label": "Message",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId",
          "_acrossData.receiverAddress"
        ]
      },
      "startBridgeTokensViaAllBridge(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.fees",
            "label": "Fees",
            "format": "tokenAmount"
          },
          {
            "path": "_allBridgeData.recipient",
            "label": "Recipient",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.receiveToken",
            "label": "Receive Token",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.messenger",
            "label": "Messenger",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.payFeeWithSendingAsset",
            "label": "Pay Fee With Sending Asset",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_allBridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaAllBridge(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.fees",
            "label": "Fees",
            "format": "tokenAmount"
          },
          {
            "path": "_allBridgeData.recipient",
            "label": "Recipient",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.receiveToken",
            "label": "Receive Token",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.messenger",
            "label": "Messenger",
            "format": "raw"
          },
          {
            "path": "_allBridgeData.payFeeWithSendingAsset",
            "label": "Pay Fee With Sending Asset",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId",
          "_allBridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaArbitrumBridge(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_arbitrumData.maxSubmissionCost",
            "label": "Max Submission Cost",
            "format": "raw"
          },
          {
            "path": "_arbitrumData.maxGas",
            "label": "Max Gas",
            "format": "raw"
          },
          {
            "path": "_arbitrumData.maxGasPrice",
            "label": "Max Gas Price",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaArbitrumBridge(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_arbitrumData.maxSubmissionCost",
            "label": "Max Submission Cost",
            "format": "raw"
          },
          {
            "path": "_arbitrumData.maxGas",
            "label": "Max Gas",
            "format": "raw"
          },
          {
            "path": "_arbitrumData.maxGasPrice",
            "label": "Max Gas Price",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaCBridge(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_cBridgeData.maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          },
          {
            "path": "_cBridgeData.nonce",
            "label": "Nonce",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaCBridge(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_cBridgeData.maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          },
          {
            "path": "_cBridgeData.nonce",
            "label": "Nonce",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "triggerRefund(address,bytes,address,address,uint256)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_assetAddress",
            "label": "Asset Address",
            "format": "addressOrName"
          },
          {
            "path": "_to",
            "label": "To",
            "format": "addressOrName"
          },
          {
            "path": "_amount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_assetAddress"
            }
          }
        ],
        "required": [
          "_callTo",
          "_callData",
          "_assetAddress",
          "_to",
          "_amount"
        ]
      },
      "startBridgeTokensViaCBridgeERC20Min(bytes32,address,uint64,address,uint256,uint64,uint32)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "amount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "sendingAssetId",
          "amount",
          "nonce",
          "maxSlippage"
        ]
      },
      "startBridgeTokensViaCBridgeERC20Packed()": {
        "intent": "Bridge tokens",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaCBridgeNativeMin(bytes32,address,uint64,uint64,uint32)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "nonce",
          "maxSlippage"
        ]
      },
      "startBridgeTokensViaCBridgeNativePacked()": {
        "intent": "Bridge tokens",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaCelerCircleBridge(tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaCelerCircleBridge(tuple,tuple[])": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaCelerIM(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_celerIMData.maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          },
          {
            "path": "_celerIMData.nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "_celerIMData.callTo",
            "label": "Call To",
            "format": "raw"
          },
          {
            "path": "_celerIMData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_celerIMData.messageBusFee",
            "label": "Message Bus Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_celerIMData.bridgeType",
            "label": "Bridge Type",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaCelerIM(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_celerIMData.maxSlippage",
            "label": "Max Slippage",
            "format": "raw"
          },
          {
            "path": "_celerIMData.nonce",
            "label": "Nonce",
            "format": "raw"
          },
          {
            "path": "_celerIMData.callTo",
            "label": "Call To",
            "format": "raw"
          },
          {
            "path": "_celerIMData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_celerIMData.messageBusFee",
            "label": "Message Bus Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_celerIMData.bridgeType",
            "label": "Bridge Type",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "diamondCut(tuple[],address,bytes)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_diamondCut[0].facetAddress",
            "label": "Facet Address",
            "format": "addressOrName"
          },
          {
            "path": "_diamondCut[0].action",
            "label": "Action",
            "format": "raw"
          },
          {
            "path": "_diamondCut[0].functionSelectors",
            "label": "Function Selectors",
            "format": "raw"
          },
          {
            "path": "_init",
            "label": "Init",
            "format": "addressOrName"
          },
          {
            "path": "_calldata",
            "label": "Calldata",
            "format": "raw"
          }
        ],
        "required": [
          "_init",
          "_calldata"
        ]
      },
      "pauseDiamond()": {
        "intent": "Execute function",
        "fields": [],
        "required": []
      },
      "removeFacet(address)": {
        "intent": "Remove Facet",
        "fields": [
          {
            "path": "_facetAddress",
            "label": "Facet Address",
            "format": "addressOrName"
          }
        ],
        "required": [
          "_facetAddress"
        ]
      },
      "unpauseDiamond(address[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_blacklist",
            "label": "Blacklist",
            "format": "raw"
          }
        ],
        "required": [
          "_blacklist"
        ]
      },
      "swapTokensGeneric(bytes32,string,string,address,uint256,tuple[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "_receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_minAmount",
            "label": "Min Amount",
            "format": "tokenAmount"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_transactionId",
          "_integrator",
          "_referrer",
          "_receiver",
          "_minAmount",
          "_swapData[0].receivingAssetId"
        ]
      },
      "swapTokensMultipleV3ERC20ToERC20(bytes32,string,string,address,uint256,tuple[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "_receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_transactionId",
          "_integrator",
          "_referrer",
          "_receiver",
          "_minAmountOut",
          "_swapData[0].receivingAssetId"
        ]
      },
      "swapTokensMultipleV3ERC20ToNative(bytes32,string,string,address,uint256,tuple[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "_receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_transactionId",
          "_integrator",
          "_referrer",
          "_receiver",
          "_minAmountOut",
          "_swapData[0].receivingAssetId"
        ]
      },
      "swapTokensMultipleV3NativeToERC20(bytes32,string,string,address,uint256,tuple[])": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "_receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_transactionId",
          "_integrator",
          "_referrer",
          "_receiver",
          "_minAmountOut",
          "_swapData[0].receivingAssetId"
        ]
      },
      "swapTokensSingleV3ERC20ToERC20(bytes32,string,string,address,uint256,tuple)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "_receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "_swapData.callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData.sendingAssetId"
            }
          },
          {
            "path": "_swapData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData.requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_transactionId",
          "_integrator",
          "_referrer",
          "_receiver",
          "_minAmountOut",
          "_swapData.sendingAssetId"
        ]
      },
      "swapTokensSingleV3ERC20ToNative(bytes32,string,string,address,uint256,tuple)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "_receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "_swapData.callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData.sendingAssetId"
            }
          },
          {
            "path": "_swapData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData.requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_transactionId",
          "_integrator",
          "_referrer",
          "_receiver",
          "_minAmountOut",
          "_swapData.sendingAssetId"
        ]
      },
      "swapTokensSingleV3NativeToERC20(bytes32,string,string,address,uint256,tuple)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_referrer",
            "label": "Referrer",
            "format": "raw"
          },
          {
            "path": "_receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_minAmountOut",
            "label": "Min Amount Out",
            "format": "tokenAmount"
          },
          {
            "path": "_swapData.callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData.fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData.sendingAssetId"
            }
          },
          {
            "path": "_swapData.callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData.requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_transactionId",
          "_integrator",
          "_referrer",
          "_receiver",
          "_minAmountOut",
          "_swapData.sendingAssetId"
        ]
      },
      "startBridgeTokensViaXDaiBridge(tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaXDaiBridge(tuple,tuple[])": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "setApprovalForBridges(address[],address[])": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "bridges",
            "label": "Bridges",
            "format": "raw"
          },
          {
            "path": "tokensToApprove",
            "label": "Tokens To Approve",
            "format": "raw"
          }
        ],
        "required": [
          "bridges",
          "tokensToApprove"
        ]
      },
      "startBridgeTokensViaHopL1ERC20(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaHopL1Native(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaHopL2ERC20(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "startBridgeTokensViaHopL2Native(tuple,tuple)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaHopL1ERC20(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "swapAndStartBridgeTokensViaHopL1Native(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "swapAndStartBridgeTokensViaHopL2ERC20(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "swapAndStartBridgeTokensViaHopL2Native(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_hopData.bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.deadline",
            "label": "Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "_hopData.hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "_hopData.relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_hopData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "setApprovalForHopBridges(address[],address[])": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "bridges",
            "label": "Bridges",
            "format": "raw"
          },
          {
            "path": "tokensToApprove",
            "label": "Tokens To Approve",
            "format": "raw"
          }
        ],
        "required": [
          "bridges",
          "tokensToApprove"
        ]
      },
      "startBridgeTokensViaHopL1ERC20Min(bytes8,address,uint256,address,uint256,uint256,address,uint256,address)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "sendingAssetId",
          "minAmount",
          "destinationAmountOutMin",
          "relayer",
          "relayerFee",
          "hopBridge"
        ]
      },
      "startBridgeTokensViaHopL1ERC20Packed()": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaHopL1NativeMin(bytes8,address,uint256,uint256,address,uint256,address)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "relayer",
            "label": "Relayer",
            "format": "addressOrName"
          },
          {
            "path": "relayerFee",
            "label": "Relayer Fee",
            "format": "tokenAmount"
          },
          {
            "path": "hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "destinationAmountOutMin",
          "relayer",
          "relayerFee",
          "hopBridge"
        ]
      },
      "startBridgeTokensViaHopL1NativePacked()": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaHopL2ERC20Min(bytes8,address,uint256,address,uint256,uint256,uint256,uint256,uint256,address)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "sendingAssetId"
            }
          },
          {
            "path": "destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "sendingAssetId",
          "minAmount",
          "bonderFee",
          "amountOutMin",
          "destinationAmountOutMin",
          "destinationDeadline",
          "hopBridge"
        ]
      },
      "startBridgeTokensViaHopL2ERC20Packed()": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaHopL2NativeMin(bytes8,address,uint256,uint256,uint256,uint256,uint256,address)": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [
          {
            "path": "transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "bonderFee",
            "label": "Bonder Fee",
            "format": "tokenAmount"
          },
          {
            "path": "amountOutMin",
            "label": "Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "destinationAmountOutMin",
            "label": "Destination Amount Out Min",
            "format": "tokenAmount"
          },
          {
            "path": "destinationDeadline",
            "label": "Destination Deadline",
            "format": "raw"
          },
          {
            "path": "hopBridge",
            "label": "Hop Bridge",
            "format": "addressOrName"
          }
        ],
        "required": [
          "transactionId",
          "receiver",
          "destinationChainId",
          "bonderFee",
          "amountOutMin",
          "destinationAmountOutMin",
          "destinationDeadline",
          "hopBridge"
        ]
      },
      "startBridgeTokensViaHopL2NativePacked()": {
        "intent": "Bridge tokens via Hop Protocol",
        "fields": [],
        "required": []
      },
      "startBridgeTokensViaOmniBridge(tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaOmniBridge(tuple,tuple[])": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "initOptimism(tuple[],address)": {
        "intent": "Initialize Optimism",
        "fields": [
          {
            "path": "configs[0].assetId",
            "label": "Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "configs[0].bridge",
            "label": "Bridge",
            "format": "addressOrName"
          },
          {
            "path": "standardBridge",
            "label": "Standard Bridge",
            "format": "addressOrName"
          }
        ],
        "required": [
          "standardBridge"
        ]
      },
      "registerOptimismBridge(address,address)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "assetId",
            "label": "Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "bridge",
            "label": "Bridge",
            "format": "addressOrName"
          }
        ],
        "required": [
          "assetId",
          "bridge"
        ]
      },
      "startBridgeTokensViaOptimismBridge(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_optimismData.assetIdOnL2",
            "label": "Asset Id On L2",
            "format": "addressOrName"
          },
          {
            "path": "_optimismData.l2Gas",
            "label": "L2 Gas",
            "format": "raw"
          },
          {
            "path": "_optimismData.isSynthetix",
            "label": "Is Synthetix",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaOptimismBridge(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_optimismData.assetIdOnL2",
            "label": "Asset Id On L2",
            "format": "addressOrName"
          },
          {
            "path": "_optimismData.l2Gas",
            "label": "L2 Gas",
            "format": "raw"
          },
          {
            "path": "_optimismData.isSynthetix",
            "label": "Is Synthetix",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "registerPeripheryContract(string,address)": {
        "intent": "Register PeripheryContract",
        "fields": [
          {
            "path": "_name",
            "label": "Name",
            "format": "raw"
          },
          {
            "path": "_contractAddress",
            "label": "Contract Address",
            "format": "addressOrName"
          }
        ],
        "required": [
          "_name",
          "_contractAddress"
        ]
      },
      "startBridgeTokensViaPolygonBridge(tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaPolygonBridge(tuple,tuple[])": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaRelay(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_relayData.requestId",
            "label": "Request Id",
            "format": "raw"
          },
          {
            "path": "_relayData.nonEVMReceiver",
            "label": "Non E V M Receiver",
            "format": "raw"
          },
          {
            "path": "_relayData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "raw"
          },
          {
            "path": "_relayData.signature",
            "label": "Signature",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaRelay(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_relayData.requestId",
            "label": "Request Id",
            "format": "raw"
          },
          {
            "path": "_relayData.nonEVMReceiver",
            "label": "Non E V M Receiver",
            "format": "raw"
          },
          {
            "path": "_relayData.receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "raw"
          },
          {
            "path": "_relayData.signature",
            "label": "Signature",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaSquid(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_squidData.routeType",
            "label": "Route Type",
            "format": "raw"
          },
          {
            "path": "_squidData.destinationChain",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_squidData.destinationAddress",
            "label": "Destination Address",
            "format": "raw"
          },
          {
            "path": "_squidData.bridgedTokenSymbol",
            "label": "Bridged Token Symbol",
            "format": "raw"
          },
          {
            "path": "_squidData.depositAssetId",
            "label": "Deposit Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_squidData.sourceCalls",
            "label": "Source Calls",
            "format": "raw"
          },
          {
            "path": "_squidData.payload",
            "label": "Payload",
            "format": "raw"
          },
          {
            "path": "_squidData.fee",
            "label": "Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_squidData.depositAssetId"
            }
          },
          {
            "path": "_squidData.enableExpress",
            "label": "Enable Express",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaSquid(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_squidData.routeType",
            "label": "Route Type",
            "format": "raw"
          },
          {
            "path": "_squidData.destinationChain",
            "label": "Destination Chain",
            "format": "raw"
          },
          {
            "path": "_squidData.destinationAddress",
            "label": "Destination Address",
            "format": "raw"
          },
          {
            "path": "_squidData.bridgedTokenSymbol",
            "label": "Bridged Token Symbol",
            "format": "raw"
          },
          {
            "path": "_squidData.depositAssetId",
            "label": "Deposit Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_squidData.sourceCalls",
            "label": "Source Calls",
            "format": "raw"
          },
          {
            "path": "_squidData.payload",
            "label": "Payload",
            "format": "raw"
          },
          {
            "path": "_squidData.fee",
            "label": "Fee",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_squidData.depositAssetId"
            }
          },
          {
            "path": "_squidData.enableExpress",
            "label": "Enable Express",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaStargate(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_stargateData.assetId",
            "label": "Asset Id",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams",
            "label": "Send Params",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.dstEid",
            "label": "Dst Eid",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.to",
            "label": "To",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.amountLD",
            "label": "Amount L D",
            "format": "tokenAmount"
          },
          {
            "path": "_stargateData.sendParams.minAmountLD",
            "label": "Min Amount L D",
            "format": "tokenAmount"
          },
          {
            "path": "_stargateData.sendParams.extraOptions",
            "label": "Extra Options",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.composeMsg",
            "label": "Compose Msg",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.oftCmd",
            "label": "Oft Cmd",
            "format": "raw"
          },
          {
            "path": "_stargateData.fee",
            "label": "Fee",
            "format": "raw"
          },
          {
            "path": "_stargateData.fee.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_stargateData.fee.lzTokenFee",
            "label": "Lz Token Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_stargateData.refundAddress",
            "label": "Refund Address",
            "format": "addressOrName"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_stargateData.sendParams.minAmountLD"
        ]
      },
      "swapAndStartBridgeTokensViaStargate(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_stargateData.assetId",
            "label": "Asset Id",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams",
            "label": "Send Params",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.dstEid",
            "label": "Dst Eid",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.to",
            "label": "To",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.amountLD",
            "label": "Amount L D",
            "format": "tokenAmount"
          },
          {
            "path": "_stargateData.sendParams.minAmountLD",
            "label": "Min Amount L D",
            "format": "tokenAmount"
          },
          {
            "path": "_stargateData.sendParams.extraOptions",
            "label": "Extra Options",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.composeMsg",
            "label": "Compose Msg",
            "format": "raw"
          },
          {
            "path": "_stargateData.sendParams.oftCmd",
            "label": "Oft Cmd",
            "format": "raw"
          },
          {
            "path": "_stargateData.fee",
            "label": "Fee",
            "format": "raw"
          },
          {
            "path": "_stargateData.fee.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_stargateData.fee.lzTokenFee",
            "label": "Lz Token Fee",
            "format": "tokenAmount"
          },
          {
            "path": "_stargateData.refundAddress",
            "label": "Refund Address",
            "format": "addressOrName"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId",
          "_stargateData.sendParams.minAmountLD"
        ]
      },
      "startBridgeTokensViaSymbiosis(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_symbiosisData.firstSwapCalldata",
            "label": "First Swap Calldata",
            "format": "raw"
          },
          {
            "path": "_symbiosisData.secondSwapCalldata",
            "label": "Second Swap Calldata",
            "format": "raw"
          },
          {
            "path": "_symbiosisData.intermediateToken",
            "label": "Intermediate Token",
            "format": "addressOrName"
          },
          {
            "path": "_symbiosisData.firstDexRouter",
            "label": "First Dex Router",
            "format": "addressOrName"
          },
          {
            "path": "_symbiosisData.secondDexRouter",
            "label": "Second Dex Router",
            "format": "addressOrName"
          },
          {
            "path": "_symbiosisData.approvedTokens",
            "label": "Approved Tokens",
            "format": "raw"
          },
          {
            "path": "_symbiosisData.callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_symbiosisData.callData",
            "label": "Call Data",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaSymbiosis(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_symbiosisData.firstSwapCalldata",
            "label": "First Swap Calldata",
            "format": "raw"
          },
          {
            "path": "_symbiosisData.secondSwapCalldata",
            "label": "Second Swap Calldata",
            "format": "raw"
          },
          {
            "path": "_symbiosisData.intermediateToken",
            "label": "Intermediate Token",
            "format": "addressOrName"
          },
          {
            "path": "_symbiosisData.firstDexRouter",
            "label": "First Dex Router",
            "format": "addressOrName"
          },
          {
            "path": "_symbiosisData.secondDexRouter",
            "label": "Second Dex Router",
            "format": "addressOrName"
          },
          {
            "path": "_symbiosisData.approvedTokens",
            "label": "Approved Tokens",
            "format": "raw"
          },
          {
            "path": "_symbiosisData.callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_symbiosisData.callData",
            "label": "Call Data",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaThorSwap(tuple,tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_thorSwapData.vault",
            "label": "Vault",
            "format": "addressOrName"
          },
          {
            "path": "_thorSwapData.memo",
            "label": "Memo",
            "format": "raw"
          },
          {
            "path": "_thorSwapData.expiration",
            "label": "Expiration",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaThorSwap(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_thorSwapData.vault",
            "label": "Vault",
            "format": "addressOrName"
          },
          {
            "path": "_thorSwapData.memo",
            "label": "Memo",
            "format": "raw"
          },
          {
            "path": "_thorSwapData.expiration",
            "label": "Expiration",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "withdraw(address,address,uint256)": {
        "intent": "Execute function",
        "fields": [
          {
            "path": "_assetAddress",
            "label": "Asset Address",
            "format": "addressOrName"
          },
          {
            "path": "_to",
            "label": "To",
            "format": "addressOrName"
          },
          {
            "path": "_amount",
            "label": "Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_assetAddress"
            }
          }
        ],
        "required": [
          "_assetAddress",
          "_to",
          "_amount"
        ]
      },
      "startBridgeTokensViaChainflip(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_chainflipData.nonEVMReceiver",
            "label": "Non E V M Receiver",
            "format": "raw"
          },
          {
            "path": "_chainflipData.dstToken",
            "label": "Dst Token",
            "format": "raw"
          },
          {
            "path": "_chainflipData.dstCallReceiver",
            "label": "Dst Call Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_chainflipData.dstCallSwapData",
            "label": "Dst Call Swap Data",
            "format": "raw"
          },
          {
            "path": "_chainflipData.gasAmount",
            "label": "Gas Amount",
            "format": "tokenAmount"
          },
          {
            "path": "_chainflipData.cfParameters",
            "label": "Cf Parameters",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaChainflip(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_chainflipData.nonEVMReceiver",
            "label": "Non E V M Receiver",
            "format": "raw"
          },
          {
            "path": "_chainflipData.dstToken",
            "label": "Dst Token",
            "format": "raw"
          },
          {
            "path": "_chainflipData.dstCallReceiver",
            "label": "Dst Call Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_chainflipData.dstCallSwapData",
            "label": "Dst Call Swap Data",
            "format": "raw"
          },
          {
            "path": "_chainflipData.gasAmount",
            "label": "Gas Amount",
            "format": "tokenAmount"
          },
          {
            "path": "_chainflipData.cfParameters",
            "label": "Cf Parameters",
            "format": "raw"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "startBridgeTokensViaGlacis(tuple,tuple)": {
        "intent": "Bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_glacisData.refundAddress",
            "label": "Refund Address",
            "format": "addressOrName"
          },
          {
            "path": "_glacisData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId"
        ]
      },
      "swapAndStartBridgeTokensViaGlacis(tuple,tuple[],tuple)": {
        "intent": "Swap and bridge tokens",
        "fields": [
          {
            "path": "_bridgeData.transactionId",
            "label": "Transaction Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.bridge",
            "label": "Bridge",
            "format": "raw"
          },
          {
            "path": "_bridgeData.integrator",
            "label": "Integrator",
            "format": "raw"
          },
          {
            "path": "_bridgeData.referrer",
            "label": "Referrer",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.receiver",
            "label": "Receiver",
            "format": "addressOrName"
          },
          {
            "path": "_bridgeData.minAmount",
            "label": "Min Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_bridgeData.sendingAssetId"
            }
          },
          {
            "path": "_bridgeData.destinationChainId",
            "label": "Destination Chain Id",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasSourceSwaps",
            "label": "Has Source Swaps",
            "format": "raw"
          },
          {
            "path": "_bridgeData.hasDestinationCall",
            "label": "Has Destination Call",
            "format": "raw"
          },
          {
            "path": "_swapData[0].callTo",
            "label": "Call To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].approveTo",
            "label": "Approve To",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].sendingAssetId",
            "label": "Sending Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].receivingAssetId",
            "label": "Receiving Asset Id",
            "format": "addressOrName"
          },
          {
            "path": "_swapData[0].fromAmount",
            "label": "From Amount",
            "format": "tokenAmount",
            "params": {
              "tokenPath": "_swapData[0].sendingAssetId"
            }
          },
          {
            "path": "_swapData[0].callData",
            "label": "Call Data",
            "format": "raw"
          },
          {
            "path": "_swapData[0].requiresDeposit",
            "label": "Requires Deposit",
            "format": "raw"
          },
          {
            "path": "_glacisData.refundAddress",
            "label": "Refund Address",
            "format": "addressOrName"
          },
          {
            "path": "_glacisData.nativeFee",
            "label": "Native Fee",
            "format": "tokenAmount"
          }
        ],
        "required": [
          "_bridgeData.transactionId",
          "_bridgeData.sendingAssetId",
          "_bridgeData.receiver",
          "_bridgeData.minAmount",
          "_bridgeData.destinationChainId",
          "_swapData[0].receivingAssetId"
        ]
      },
      "initDeBridgeDln(tuple[])": {
        "intent": "Bridge tokens via DeBridge DLN",
        "fields": [
          {
            "path": "chainIdConfigs[0].chainId",
            "label": "Chain Id",
            "format": "raw"
          },
          {
            "path": "chainIdConfigs[0].deBridgeChainId",
            "label": "De Bridge Chain Id",
            "format": "raw"
          }
        ],
        "required": []
      },
      "setDeBridgeChainId(uint256,uint256)": {
        "intent": "Bridge tokens via DeBridge DLN",
        "fields": [
          {
            "path": "_chainId",
            "label": "Chain Id",
            "format": "raw"
          },
          {
            "path": "_deBridgeChainId",
            "label": "De Bridge Chain Id",
            "format": "raw"
          }
        ],
        "required": [
          "_chainId",
          "_deBridgeChainId"
        ]
      }
    }
  }
}
