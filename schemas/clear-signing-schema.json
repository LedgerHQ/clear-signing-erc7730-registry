{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "properties": {
        "$schema": {
            "title": "Schema",
            "type": "string",
            "description": "The schema that the document should conform to. This should be the URL of a version of the clear signing JSON schemas available under https://github.com/LedgerHQ/clear-signing-format-spec/schemas."
        },
        "context": {
            "title": "Binding Context",
            "type": "object",
            "description": "The binding context is a set of key-value pairs that are used to bind the document to a specific context. Currently, supported contexts include a specific contract address or a specific EIP712 message domain. Wallets should ensure the correct formatting document is applied to the corresponding context.",
            "properties": {
                "$id" : {
                    "$ref": "#/$definitions/id"
                }
            },
            "oneOf": [
                {
                    "$ref": "#/$definitions/contractBinding"
                },
                {
                    "$ref": "#/$definitions/EIP712DomainBinding"
                }
            ],
            "unresolvedProperties": false
        },
        "includes": {
            "title": "External includes",
            "type": "array",
            "description": "An array of URLs that should be included in the document, all includes are merged into this file before analysis. This can be used to manage interfaces definitions without redundancy.",
            "items": {
                "title": "Include",
                "type": "string",
                "format": "URL",
                "description": "The URL of the external file to merge into this file."
            }
        },
        "metadata": {
            "type": "object",
            "properties": {
                "owner": {
                    "title": "Owner display name",
                    "type": "string",
                    "description": "The display name of the owner or target of the contract / message to be clear signed."
                },
                "info": {
                    "$ref": "#/$definitions/ownerInfo"
                },
                "token": {
                    "$ref": "#/$definitions/tokenInfo"
                },
                "constants": {
                    "title": "Constant values",
                    "type": "object",
                    "description": "A set of values that can be used in format parameters. Can be referenced with a path expression like $.metadata.constants.CONSTANT_NAME",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "enums": {
                    "title": "Enums",
                    "type": "object",
                    "description": "A set of enums that are used to format fields replacing values with human readable strings.",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "type": "object",
                                "title": "A dynamic enum",
                                "description": "A dynamic enum contains an URL which returns a json file with simple key-values mapping values display name. It is assumed those values can change between two calls to clear sign.",
                                "properties": {
                                    "url": {
                                        "title": "Enum URL",
                                        "type": "string",
                                        "format": "uri",
                                        "description": "The URL of the json file containing the key-values mapping."
                                    }
                                },
                                "additionalProperties": false
                            },
                            {
                                "title": "Enum",
                                "type": "object",
                                "description": "A set of values that will be used to replace a constant with a human readable string.",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        ]
                    }
                }
            }
        },
        "display": {
            "title": "Display Formatting Info",
            "type": "object",
            "description": "The display section contains all the information needed to format the data in a human readable way. It contains the constants and formatters used to display the data contained in the bound structure.",
            "properties": {
                "definitions": {
                    "type": "object",
                    "title": "Common Formatter Definitions",
                    "description": "A set of definitions that can be used to share formatting information between multiple messages / functions.",
                    "additionalProperties": {
                        "$ref": "#/$definitions/field"
                    }
                },
                "formats": {
                    "title": "List of field formats",
                    "description": "The list includes formatting info for each field of a structure. This list is indexed by a key identifying uniquely the message's type in the abi. For smartcontracts, it is the selector of the function, encoded in an hex string; and for EIP712 messages it is the primaryType of the message.",
                    "type": "object",
                    "additionalProperties": {
                        "title": "A single formatter",
                        "description": "A formatter contains formatting information of fields in a single type of message. Its key is the unique identifier of the message's type in the abi. For smartcontracts, it is the selector of the function, encoded in an hex string; and for EIP712 messages it is the primaryType of the message.",
                        "type": "object",
                        "properties": {
                            "$id": {
                                "$ref": "#/$definitions/id"
                            },
                            "intent": {
                                "title": "Intent message",
                                "description": "A description of the intent of the message, that will be displayed to the user.",
                                "type": "string"
                            },
                            "fields": {
                                "$ref": "#/$definitions/fields"
                            },
                            "required": {
                                "title": "Required fields",
                                "description": "A list of fields that are required to be displayed to the user. A field that has a formatter and is not in this list is optional. A field that does not have a formatter should be silent, ie not shown",
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "screens": {
                                "title": "Screens grouping information",
                                "description": "Screens section is used to group multiple fields to display into screens. Each key is a wallet type name. The format of the screens is wallet type dependent, as well as what can be done (reordering fields, max number of screens, etc..). See each wallet manufacturer documentatio for more information.",
                                "type": "object",
                                "additionalProperties": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/$definitions/screen"
                                    }
                                }
                            }
                        },
                        "additionalProperties": false
                    }
                }
            },
            "required": [
                "formats"
            ],
            "additionalProperties": false
        }
    },
    "additionalProperties": false,
    "$definitions": {
        "reference": {
            "title": "Reference",
            "description": "A reference to a shared definition that should be used as the field formatting definition. The value is the key in the display definitions section, as a path expression $.display.definitions.DEFINITION_NAME. It is used to share definitions between multiple messages / functions.",
            "properties": {
                "$ref": {
                    "title": "Internal Definition",
                    "description": "An internal defintion that should be used as the field formatting defintion. The value is the key in the display definitions section, as a path expression $.display.definitions.DEFINITION_NAME.",
                    "type": "string"
                },
                "params": {
                    "title": "Parameters",
                    "description": "Parameters override. These values takes precedence over the ones in the definition itself",
                    "type": "object",
                    "additionalProperties": { "type": "string" }
                }
            },
            "required": [
                "$ref"
            ],
            "additionalProperties": false
        },
        "field": {
            "title": "Field formatter",
            "description": "A field formatter contains formatting information of a single field in a message.",
            "type": "object",
            "properties": {
                "$id": {
                    "$ref": "#/$definitions/id"
                },
                "label": {
                    "title": "Field Label",
                    "description": "The label of the field, that will be displayed to the user in front of the formatted field value.",
                    "type": "string"
                },
                "format": {
                    "title": "Field Format",
                    "description": "The format of the field, that will be used to format the field value in a human readable way.",
                    "type": "string",
                    "$ref": "#/$definitions/format"
                }
            },
            "allOf" : [
                {
                    "if": { "properties": { "format": { "const": "addressName" } } },
                    "then": {
                        "properties": { 
                            "params": { "$ref": "#/$definitions/addressNameParameters" }
                        }
                    }
                },
                {
                    "if": { "properties": { "format": { "const": "nftName" } } },
                    "then": {
                        "properties": {
                            "params": { "$ref": "#/$definitions/nftNameParameters" }
                        }
                    }
                },
                {
                    "if": { "properties": { "format": { "const": "tokenAmount" } } },
                    "then": {
                        "properties": { 
                            "params": { "$ref": "#/$definitions/tokenAmountParameters" }
                        }
                    }
                },
                {
                    "if": { "properties": { "format": { "const": "allowanceAmount" } } },
                    "then": {
                        "properties": {
                            "params": { "$ref": "#/$definitions/allowanceAmountParameters" }
                        }
                    }
                },
                {
                    "if": { "properties": { "format": { "const": "percentage" } } },
                    "then": {
                        "properties": {
                            "params": { "$ref": "#/$definitions/percentageParameters" }
                        }
                    }
                },
                {
                    "if": { "properties": { "format": { "const": "date" } } },
                    "then": {
                        "properties": {
                            "params": { "$ref": "#/$definitions/dateParameters" }
                        }
                    }
                },
                {
                    "if": { "properties": { "format": { "const": "enum" } } },
                    "then": {
                        "properties": {
                            "params": { "$ref": "#/$definitions/enumParameters" }
                        }
                    }
                }
            ],
            "required": [
                "label",
                "format"
            ],
            "unresolvedProperties": false
        },
        "structFormats": {
            "title": "Struct Field Formats",
            "description": "A set of field formats used to group whole definitions for structures for instance. This allows nesting definitions of formats, but note that support for deep nesting will be device dependent.",
            "type": "object",
            "properties": {
                "fields": {
                    "$ref": "#/$definitions/fields"
                }
            },
            "required": [
                "fields"
            ],
            "additionalProperties": false
        },
        "fields": {
            "title": "Field Formatters set",
            "type": "object",
            "description": "Definitions of fields formatters. Keys are a path of the field(s) to which the formatter applies. The path is in a format matching the schema of the structured data. See the specification for more details.",
            "additionalProperties": {
                "oneOf": [
                    {
                        "$ref": "#/$definitions/reference"
                    },
                    {
                        "$ref": "#/$definitions/field"
                    },
                    {
                        "$ref": "#/$definitions/structFormats"
                    }
                ]
            },
            "unresolvedProperties": false
        },
        "screen": {
            "title": "Screen information",
            "description": "A screen is a group of fields that will be displayed together in a wallet. The format of the screen is wallet type dependent, as well as what can be done (reordering fields, max number of screens, etc..). See each wallet manufacturer documentatio for more information.",
            "type": "object"
        },
        "EIP712DomainBinding": {
            "type": "object",
            "properties": {
                "eip712" : {
                    "title": "EIP 712 Binding",
                    "type": "object",
                    "description": "A description of the EIP 712 message that the document is bound to. The domain should match the domain of the EIP712 message in the wallet.",
                    "properties" : {
                        "domain": {
                            "title": "EIP 712 Domain Binding",
                            "type": "object",
                            "description": "Each value of the domain should match an eip 712 message domain.",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "version": {
                                    "type": "string"
                                },
                                "chainId": {
                                    "type": "integer",
                                    "format": "eip155"
                                },
                                "verifyingContract": {
                                    "type": "string",
                                    "format": "eip55"
                                }
                            }
                        },
                        "schemas" : 
                        {
                            "type": "array",
                            "description": "An array of EIP712 schemas that can be used to validate the message.",
                            "items": {
                                "oneOf": [
                                    {
                                        "$ref": "#/$definitions/eip712-json-schema"
                                    },
                                    {
                                        "title": "An EIP712 Schema url",
                                        "description": "URL of an EIP712 Schema bound to this file.",
                                        "type": "string",
                                        "format": "uri"
                                    }
                                ]
                            }
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "eip712"
            ]
        },
        "contractBinding": {
            "type": "object",
            "properties": {
                "contract": {
                    "title": "Contract Binding",
                    "type": "object",
                    "description": "A description of the smart contract that the document is bound to. ChainId should match the target chain and address should match the targeted smart contract.",
                    "properties": {
                        "chainId": {
                            "type": "integer",
                            "format": "eip155"
                        },
                        "address": {
                            "type": "string",
                            "format": "eip55"
                        },
                        "abi": {
                            "oneOf": [
                                {
                                    "$ref": "#/$definitions/abi-json-schema"
                                },
                                {
                                    "title": "An ABI url",
                                    "description": "URL of an ABI bound to this file.",
                                    "type": "string",
                                    "format": "uri"
                                }
                            ]
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "contract"
            ]
        },
        "ownerInfo": {
            "type": "object",
            "properties": {
                "legalName": {
                    "title": "Owner Legal Name",
                    "type": "string",
                    "description": "The full legal name of the owner if different from the owner field."
                },
                "lastUpdate": {
                    "title": "Last Update of the contract / message",
                    "type": "string",
                    "format": "date-time",
                    "description": "The date of the last update of the contract / message."
                },
                "url": {
                    "title": "Owner URL",
                    "type": "string",
                    "format": "URL",
                    "description": "URL with more info on the entity the user interacts with."
                }
            },
            "required": [
                "lastUpdate",
                "url"
            ],
            "additionalProperties": false
        },
        "tokenInfo": {
            "title": "Token Description",
            "type": "object",
            "description": "A description of an ERC20 token exported by this format, that should be trusted. Not mandatory if the corresponding metadata can be fetched from the contract itself.",
            "properties": {
                "name": {
                    "title": "Token Name",
                    "type": "string"
                },
                "ticker": {
                    "title": "Token Ticker",
                    "type": "string",
                    "description": "A short capitalized ticker for the token, that will be displayed in front of corresponding amounts."
                },
                "magnitude": {
                    "title": "Token Magnitude",
                    "type": "integer",
                    "description": "The number of decimals of the token ticker, used to display amounts."
                }
            },
            "required": [
                "name",
                "ticker",
                "magnitude"
            ],
            "additionalProperties": false
        },
        "id": {
            "title": "ID",
            "type": "string",
            "description": "An internal identifier that can be used either for clarity specifying what the element is or as a reference in device specific sections."
        },
        "format": {
            "anyOf": [
                {
                    "title": "Raw format",
                    "const": "raw",
                    "description": "The field should be displayed as the natural representation of the underlying structured data type."
                },
                {
                    "title": "address format",
                    "const": "addressName",
                    "description": "The field should be displayed as a trusted name, or as a raw address if no names are found in trusted sources. List of trusted sources can be optionally specified in parameters."
                },
                {
                    "title": "integer format",
                    "const": "nftName",
                    "description": "The field should be displayed as a single NFT names, or as a raw token Id if a specific name is not found. Collection is specified by the collectionPath parameter."
                },
                {
                    "title": "integer format",
                    "const": "tokenAmount",
                    "description": "The field should be displayed as an amount, preceded by the ticker. The magnitude and ticker should be derived from the tokenPath parameter corresponding metadata."
                },
                {
                    "title": "integer format",
                    "const": "allowanceAmount",
                    "description": "The field should be displayed as an amount, preceded by the ticker. The magnitude and ticker should be derived from the tokenPath parameter corresponding metadata. In case the amount is above a certain threshold, it should be displayed as Unlimited $TICKER."
                },
                {
                    "title": "integer format",
                    "const": "percentage",
                    "description": "The field should be displayed as a percentage. Magnitude of the percentage encoding is specified as a parameter. Example: a value of 3000 with magnitude 4 is displayed as 0.3%."
                },
                {
                    "title": "integer format",
                    "const": "date",
                    "description": "The field should be displayed as a date. Suggested RFC3339 representation. Parameter specifies the encoding of the date."
                },
                {
                    "title": "integer format",
                    "const": "amount",
                    "description": "The field should be displayed as an amount in underlying currency, converted using the best magnitude / ticker available."
                },
                {
                    "title": "integer format",
                    "const": "enum",
                    "description": "The field should be displayed as a human readable string by converting the value using the enum referenced in parameters."
                }
            ]
        },
        "addressNameParameters" : {
            "title": "Address Names Formatting Parameters",
            "type": "object",
            "properties": {
                "sources": {
                    "title": "Trusted Sources for names, in order of preferences. See specification for more details on sources values.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [ "wallet", "ens", "contract", "token", "collection" ]
                    }
                }
            },
            "additionalProperties": false
        },
        "nftNameParameters" : {
            "title": "NFT Names Formatting Parameters",
            "type": "object",
            "properties": {
                "collectionPath": {
                    "title": "Collection Path",
                    "type": "string",
                    "description": "The path to the collection in the structured data."
                }
            },
            "required": [
                "collectionPath"
            ],
            "additionalProperties": false
        },
        "tokenAmountParameters": {
            "title": "Token Amount Formatting Parameters",
            "type": "object",
            "properties": {
                "tokenPath": {
                    "title": "Token Path",
                    "type": "string"
                },
                "nativeCurrencyAddress": {
                    "title": "Native Currency Address",
                    "type": "string",
                    "description": "An address equal to this value is interpreted as an amount in native currency rather than a token."
                }
            },
            "required": [
                "tokenPath"
            ],
            "additionalProperties": false
        },
        "allowanceAmountParameters": {
            "title": "Allowance Amount Formatting Parameters",
            "type": "object",
            "properties": {
                "tokenPath": {
                    "title": "Token Path",
                    "type": "string"
                },
                "threshold": {
                    "title": "Unlimited Threshold",
                    "type": "string",
                    "description": "The threshold above which the allowance should be displayed as unlimited."
                },
                "nativeCurrencyAddress": {
                    "title": "Native Currency Address",
                    "type": "string",
                    "description": "An address equal to this value is interpreted as an amount in native currency rather than a token."
                }
            },
            "required": [
                "tokenPath",
                "threshold"
            ],
            "additionalProperties": false
        },
        "percentageParameters": {
            "title": "Percentage Formatting Parameters",
            "type": "object",
            "properties": {
                "magnitude": {
                    "title": "Magnitude",
                    "type": "integer",
                    "description": "The number of decimals of the percentage."
                }
            },
            "required": [
                "magnitude"
            ],
            "additionalProperties": false
        },
        "dateParameters": {
            "title": "Date Formatting Parameters",
            "type": "object",
            "properties": {
                "encoding": {
                    "title": "Date Encoding",
                    "type": "string",
                    "description": "The encoding of the date.",
                    "enum": [
                        "blockheight",
                        "timestamp"
                    ]
                }
            },
            "required": [
                "encoding"
            ],
            "additionalProperties": false
        },
        "enumParameters": {
            "title": "Enum Formatting Parameters",
            "type": "object",
            "properties": {
                "$ref": {
                    "title": "Enum reference",
                    "type": "string",
                    "description": "The internal path to the enum definition used to convert this value."
                }
            },
            "required": [
                "$ref"
            ],
            "additionalProperties": false
        },
        "eip712-json-schema": {
            "title": "An EIP712 Schema",
            "type": "object",
            "description": "EIP712 typed data schema, restricted to type definitions and primary type only. See https://eips.ethereum.org/EIPS/eip-712#data-structures for more information.",
            "properties": {
                "types": {
                    "type": "object",
                    "description": "Type definitions for the EIP712 typed data. See https://eips.ethereum.org/EIPS/eip-712#data-structures for more information.",
                    "properties": {
                        "EIP712Domain": {
                            "type": "array",
                            "description": "EIP712 domain type definition. The domain is used as a separator between EIP712 messages to avoid reuse of signatures. Actual separator values are contained in a \"domain\" key of the message. Fields are up to the implementer, but must often include at least name, version, chainId and verifyingContract."
                        }
                    },
                    "additionalProperties": {
                        "type": "array",
                        "description": "Type definition for a specific type. Each type is an array of fields, where each field is an object with a name and a type. The type is a string, and may be a reference to another type.",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string"
                                },
                                "type": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "type"
                            ]
                        }
                    },
                    "required": [
                        "EIP712Domain"
                    ]
                },
                "primaryType": {
                    "type": "string",
                    "description": "The primary type of the EIP712 typed data. This is the type that will be used as the top level type for the message field. See https://eips.ethereum.org/EIPS/eip-712#data-structures for more information."
                }
            },
            "required": [
                "types",
                "primaryType"
            ]
        },
        "abi-json-schema": {
            "title": "An EVM ABI",
            "type": "array",
            "description": "JSON schema for the json representation of a solidity ABI",
            "items": {
                "type": "object",
                "properties": {
                    "inputs": {
                        "type": "array",
                        "description": "an array of object with input parameters",
                        "items": {
                            "$ref": "#/$definitions/abi-parameter"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "the name of the function"
                    },
                    "outputs": {
                        "type": "array",
                        "description": "an array of object with output parameters",
                        "items": {
                            "$ref": "#/$definitions/abi-parameter"
                        }
                    },
                    "stateMutability": {
                        "type": "string",
                        "enum": [
                            "pure",
                            "view",
                            "nonpayable",
                            "payable"
                        ]
                    },
                    "type": {
                        "type": "string",
                        "description": "the type of object being described",
                        "enum": [
                            "function",
                            "constructor",
                            "receive",
                            "fallback"
                        ]
                    }
                },
                "required": [
                    "inputs",
                    "type"
                ]
            }
        },
        "abi-parameter": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the parameter, used in the selector computation"
                },
                "type": {
                    "type": "string",
                    "description": "the canonical type of the parameter"
                },
                "internalType": {
                    "type": "string",
                    "description": "fully qualified type name in solidity source code"
                },
                "components": {
                    "type": "array",
                    "items": {
                        "$ref": "#/$definitions/abi-parameter"
                    }
                }
            },
            "required": [
                "name",
                "type"
            ]
        }
    }
}